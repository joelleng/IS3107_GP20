{
  "components": {
    "comp-evaluate-model-direct": {
      "executorLabel": "exec-evaluate-model-direct",
      "inputDefinitions": {
        "artifacts": {
          "model_path": {
            "artifactType": {
              "schemaTitle": "system.Model",
              "schemaVersion": "0.0.1"
            }
          }
        }
      },
      "outputDefinitions": {
        "artifacts": {
          "metrics": {
            "artifactType": {
              "schemaTitle": "system.Metrics",
              "schemaVersion": "0.0.1"
            }
          }
        }
      }
    },
    "comp-train-model-direct": {
      "executorLabel": "exec-train-model-direct",
      "outputDefinitions": {
        "artifacts": {
          "model_path": {
            "artifactType": {
              "schemaTitle": "system.Model",
              "schemaVersion": "0.0.1"
            }
          }
        }
      }
    }
  },
  "defaultPipelineRoot": "gs://is3107-car-data/pipeline-artifacts",
  "deploymentSpec": {
    "executors": {
      "exec-evaluate-model-direct": {
        "container": {
          "args": [
            "--executor_input",
            "{{$}}",
            "--function_to_execute",
            "evaluate_model_direct"
          ],
          "command": [
            "sh",
            "-c",
            "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location 'kfp==2.12.1' '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&  python3 -m pip install --quiet --no-warn-script-location 'pandas' 'google-cloud-bigquery' 'scikit-learn' 'joblib' 'db-dtypes' && \"$0\" \"$@\"\n",
            "sh",
            "-ec",
            "program_path=$(mktemp -d)\n\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\n_KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
            "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import *\n\ndef evaluate_model_direct(model_path: Input[Model], metrics: Output[Metrics]):\n    import pandas as pd\n    from sklearn.metrics import mean_squared_error, r2_score\n    from sklearn.model_selection import train_test_split\n    from joblib import load\n    import math\n    from google.cloud import bigquery\n    import json\n\n    client = bigquery.Client(project=\"is3107-453814\", location=\"US\")\n\n    query = \"\"\"\n        SELECT mileage, manufactured_year, coe_left, road_tax_per_year,\n               dereg_value, omv, arf, engine_capacity_cc, power,\n               curb_weight, no_of_owners, price\n        FROM `is3107-453814.car_dataset.used_car`\n        WHERE price IS NOT NULL\n        LIMIT 500\n    \"\"\"\n    df = client.query(query).to_dataframe()\n\n    X = df.drop(columns=[\"price\"])\n    y = df[\"price\"]\n\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n    model = load(model_path.path + \".joblib\")\n    y_pred = model.predict(X_test)\n\n    rmse = math.sqrt(mean_squared_error(y_test, y_pred))\n    r2 = r2_score(y_test, y_pred)\n\n    # Save metrics so they appear in UI\n    metrics_dict = {\n        \"rmse\": rmse,\n        \"r2_score\": r2\n    }\n\n    with open(metrics.path, \"w\") as f:\n        json.dump(metrics_dict, f)\n\n"
          ],
          "image": "python:3.9"
        }
      },
      "exec-train-model-direct": {
        "container": {
          "args": [
            "--executor_input",
            "{{$}}",
            "--function_to_execute",
            "train_model_direct"
          ],
          "command": [
            "sh",
            "-c",
            "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location 'kfp==2.12.1' '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&  python3 -m pip install --quiet --no-warn-script-location 'pandas' 'google-cloud-bigquery' 'scikit-learn' 'joblib' 'db-dtypes' && \"$0\" \"$@\"\n",
            "sh",
            "-ec",
            "program_path=$(mktemp -d)\n\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\n_KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
            "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import *\n\ndef train_model_direct(model_path: Output[Model]):\n    import pandas as pd\n    from sklearn.ensemble import RandomForestRegressor\n    from joblib import dump\n    from google.cloud import bigquery\n\n    client = bigquery.Client(project=\"is3107-453814\", location=\"US\")\n\n    query = \"\"\"\n        SELECT mileage, manufactured_year, coe_left, road_tax_per_year,\n               dereg_value, omv, arf, engine_capacity_cc, power,\n               curb_weight, no_of_owners, price\n        FROM `is3107-453814.car_dataset.used_car`\n        WHERE price IS NOT NULL\n        LIMIT 500\n    \"\"\"\n    df = client.query(query).to_dataframe()\n\n    X = df.drop(columns=[\"price\"])\n    y = df[\"price\"]\n\n    model = RandomForestRegressor()\n    model.fit(X, y)\n\n    dump(model, model_path.path + \".joblib\")\n\n"
          ],
          "image": "python:3.9"
        }
      }
    }
  },
  "pipelineInfo": {
    "name": "car-price-retrain-direct"
  },
  "root": {
    "dag": {
      "tasks": {
        "evaluate-model-direct": {
          "cachingOptions": {
            "enableCache": true
          },
          "componentRef": {
            "name": "comp-evaluate-model-direct"
          },
          "dependentTasks": [
            "train-model-direct"
          ],
          "inputs": {
            "artifacts": {
              "model_path": {
                "taskOutputArtifact": {
                  "outputArtifactKey": "model_path",
                  "producerTask": "train-model-direct"
                }
              }
            }
          },
          "taskInfo": {
            "name": "evaluate-model-direct"
          }
        },
        "train-model-direct": {
          "cachingOptions": {
            "enableCache": true
          },
          "componentRef": {
            "name": "comp-train-model-direct"
          },
          "taskInfo": {
            "name": "train-model-direct"
          }
        }
      }
    }
  },
  "schemaVersion": "2.1.0",
  "sdkVersion": "kfp-2.12.1"
}